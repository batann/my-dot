# vim:fileencoding=utf-8:foldmethod=marker
#PROMPT_COMMAND="history|tail -n1 >> /home/batan/.config/lists/commands.txt"
get_coursor_position() {
    # Request cursor position
    echo -ne "\033[6n"
    # Read response from terminal
    IFS=';' read -sdR -p $'\E[6n' _ row col
    # Remove leading '[' from row variable
    row=${row#*[}
    # Store values in variables
    cursor_position="$row,$col"
    # Output or use the variable
    echo "Cursor Position: $cursor_position"
}

#PROMPT_COMMAND="get_coursor_position"

#{{{ >>>   ANSI CODE   ##################################################################
alias oo="clear && read -p ' pane >>>  ' abc && clear && read -p 'command >>>   ' bce && tmux send-keys -t$abc $bce  Enter"
Black='\033[0;30m'
Red='\033[0;31m'
Green='\033[0;32m'
Blue='\033[0;34m'
Purple='\033[0;35m'
Cyan='\033[0;36m'
Yellow='\033[1;33m'
White='\033[1;37m'
#   ANSI CODE BACKGROUND  ##################################################################
BBlue='\e[0;104m'
BBlack='\e[0;100m'
RRed='\e[0;100m'
GGreen='\e[0;100m'
YYellow='\e[0;100m'
BBlue='\e[0;100m'
PPurple='\e[0;100m'
CCyan='\e[0;100m'
WWhite='\e[0;100m'
NC='\033[0m'
#}}}
#{{{ >>>   tmux
alias 1='tmux new-session \; split-window -h \; split-window -v -p 66 \; split-window -v\; attach\;'
alias 2='tmux new-session \; split-window -v \; split-window -h -p 66 \; split-window -h\; selectp -t1\; attach\;'
alias tk='tmux kill-session'
alias wo='terminator --geometry="1200x800+0+0 -b -e "tmux new-session 'vim' -c ':VimwikiIndex' \; split-window -h 'nvim' -c ':Calendar-view=days' \; split-window -v -p 20 'bwm-ng' \; attach\;"'
alias woo='tmux new-session 'vim' -c ':VimwikiIndex' \;split-window -v -p 30 'bpytop';\ split-window -h 'vit' \; split-window -v -p 20 'bwm-ng' \; attach\;'
alias 122='tmux new-session \; split-window -v \; split-window -h -p 33 \; selectp -t1\; attach \;'
alias tod='tmux new-session 'vim' -c ':Calendar=view-day' \; split-window -h 'nvim' -c ':TW' \; split-window -h -p 20 \; selectp -t 1\;'
alias sound='tmux new-session 'castero' \; split-window -v 'cmus' \; split-window -h -p 30 \; selectp -t 1\; attach \;'
#}}}
#{{{ >>>   ddgr
alias dg='ddgr -w github.com -n 10'
alias dy='ddgr -w youtube.com -n 10'
alias dr='ddgr -w reddit.com -n10'
alias ds='ddgr -w plato.stanford.edu'
alias dp='ddgr -w pypi.org'
alias uu="xterm -geom 120x75+0+0 -e bash -c 'ddgr'"
alias gg="xterm -geom 120x75+0+0 -e bash -c 'googler'"
#}}}
#{{{ >>>   yt-dlp
alias yt3="yt-dlp --config-locations /home/batan/.config/yt-dlp/yt-dlp.mp3.conf"
alias yt4="yt-dlp --config-locations /home/batan/.config/yt-dlp/yt-dlp.mp4.conf"
#}}}
#{{{ >>>   megatools
alias mg='megaget'
alias mp='megaput'
alias ml='megals'
alias mr='megarm'
alias mcc='megacopy'
alias mmkd='megamkdir'
#}}}
#{{{ >>>   taskwarrior
alias ta='task add'
alias tl='task list'
alias td='task done'
alias tb='task burndown'
alias tdd='task delete'
alias tbd='task burndown.daily'
alias tll='task list project:'
alias by='task add +buy proj:buy'
alias taaa='task add due:$(date -d "2024-12-15 +2 days" +%Y-%m-%dT23:30:00)'
alias taa='task add due:$(date +%Y-%m-%d)T23:30:00 proj:$(date +%j)'
#}}}
#{{{ >>>   buku
alias ba='buku -a'
alias bs='buku -s'
alias bd='buku -d'
alias bb='buku -a $(xclip -o)'
#}}}
#{{{ >>>   Common
alias sbb='sudo -u batan bash'
alias mn='sudo -u batan bash /home/batan/10/menu/scripts/mn.sh'
alias sb='sudo -u batan bash'
alias rf='rofi -show drun'
alias update='sudo apt update && sudo apt upgrade -y'
alias clean='sudo -u batan bash /home/batan/check/clean.sh'
alias nuke='sudo -u batan bash /home/batan/check/nuke.sh'
alias dia='sudo bash /home/batan/10/postinstall/dia.sh'
alias mov='mv *.mp3 /home/batan/Music & mv *.mp4 /home/batan/Videos/ & mv *.sh /home/batan/Sh & mv *.wiki /home/batan/Wiki & mv *.jpg /home/batan/Pictures'
alias e='exit'
alias dhtml='echo "file:///home/batan/10/html/homepage/d.html"| xclip -selection clipboard'
alias install='sudo apt install'
alias nala="sudo nala"
#}}}
#{{{ >>>   modify existing files
alias xx='sudo chmod +x'
alias x="xclip -selec clip"
alias alia='vim .bashrc.aliases'
alias alian='vim .bashrc.navigation'
alias ali='vim .bashrc'
#}}}
#{{{ >>>   browser
alias un='/usr/bin/flatpak run --branch=stable --arch=x86_64 --command=/app/bin/chromium --file-forwarding io.github.ungoogled_software.ungoogled_chromium --js-flags='jitless' @@u %U @@'
alias fk='falkon'
#}}}




#{{{ >>>   functions
#===================================================================================
#{{{ >>>   Draw a Border around Outcome
border(){
    read -p"> " COMM
    $COMM | awk '{
    # Store the incoming line in the buffer
    lines[NR % 5] = $0;

    # Track the longest line seen so far
    if (length($0) > global_max_len) {
        global_max_len = length($0);
    }

    # Only process when we have at least 5 lines and the line number is even
    if (NR >= 5 && NR % 2 == 0) {
        # Create top and bottom borders with the global max width
        top_border = "╔";
        for (i = 1; i <= global_max_len + 2; i++) top_border = top_border "═";
            top_border = top_border "╗";

            bottom_border = "╚";
            for (i = 1; i <= global_max_len + 2; i++) bottom_border = bottom_border "═";
                bottom_border = bottom_border "╝";

        # Use tput to move the cursor to row 10 and column 0 before printing
        system("tput cup 10 0");

        # Print the top border
        print top_border;

        # Print the 5 most recent lines, wrapped in the border
        for (i = 0; i < 5; i++) {
            printf("║ %-*s ║\n", global_max_len, lines[(NR - 5 + i) % 5]);
        }

        # Print the bottom border
        print bottom_border;

        # Sleep for 0.2 seconds to slow down the updates
        system("sleep 0.2");
    }
}'
}
#}}}
#{{{ >>>   check xx[0-9] variable

checkxx(){
    cc1=$(cat .bashrc|grep "xx[0-9]"|wc -l)
    cc2=$(cat .bashrc.aliases|grep "xx[0-9]"|wc -l)
    cc3=$(cat .bashrc.navigation|grep "xx[0-9]"|wc -l)
    cc4=$(( $cc1 + $cc2 + $cc3 ))
    echo "The variable xx[0-9] is $cc4 present in your bashrc"
}
alias checkxx='checkxx'

#}}}
#{{{ >>>   Countdown function

countd(){
    clear
    tput civis
    echo -e "Time Now              : $(date +%H:%M)"
    echo -e "Time to Countdown too : "
    tput cup 1 24
    read -n2 dd
    tput cup 1 24
    echo -e "$dd:"
    tput cup 1 27
    read -n2 ee
    tput cup 5 0
    read -p "Command to execute:   >>>   " xxx


    bb=$(date -d ${dd}:${ee} +%s)
    aa=$(date +%s)
    ff=$(( $bb - $aa ))
    echo -e "\033[37m"
    for i in $(seq -f "%06g" $ff -1 0);do tput cup 10 20 && echo $i && sleep 1;done
    echo -e "\033[0m"
    clear
    echo -e "\033[33mExecuting \033[31m${xxx}\033[0m"
    $xxx
}
#}}}
#{{{ >>>   Reminder
reminder(){
    if [[ ! -d /home/batan/.config/reminder ]]; then
        mkdir -p /home/batan/.config/reminder
    fi
    vim /home/batan/.config/reminder/$(date +%j).rem
}
#}}}
#{{{ >>>   Download Video incl Quality
d4(){
    clear
    counter="1"
    while :;
    do
        read -p "URL $counter:   >>>   " abc
        if [[ -z $abc ]];
        then
            break
        fi
        : $((counter++))
        input="$input $abc"
    done
    clear
    for URL in ${input[@]};
    do
        clear
        echo -e "Downloading $counter videos"
        echo -e "\033[32m===========================\033[0m"
        /home/batan/.local/bin/yt-dlp --restrict-filenames --force-download-archive \
            --download-archive /media/batan/100/Videos/archive.txt \
            --restrict-filenames $URL
                    : $((counter--))
                done
                clear
                echo -e "To remove whitespace in following videos and move to dir Videos enter [[ ANY ]]"
                echo -e "\033[32m===============================================================================\033[0m"
                ls *mp4
                echo -e "\033[32m===============================================================================\033[0m"
                read n1 xxx
                rename 's/ /_/g' *mp4
                mv *mp4 /home/batan/Videos
            }
            #}}}
#{{{ >>>   download

# Function to read URLs
read_urls() {
    while :; do
        clear
        echo -e "\033[34mPlease enter your \033[33m$counter.\033[34m URL\033[0m"
        read -p 'url  >>>   ' url
        if [[ -z $url ]]; then
            break
        fi
        echo $url >> $LIST
        urls+=("$url")
        ((counter++))
    done
}

# Function to select quality for each URL
select_qualities() {
    for i in "${!urls[@]}"; do
        options=$(/home/batan/.local/bin/yt-dlp -F "${urls[i]}" | awk '{print $1}' | grep '[0-9]p')
        echo -e "\033[34mSelect quality for URL $((i+1))\033[0m"
        select quality in $options; do
            qualities+=("$quality")
            break
        done
    done
}
#}}}
#{{{ >>>   Download Videos
# Function to download videos
download_videos() {
    for i in "${!urls[@]}"; do
        clear
        echo -e "Downloading your $((i+1)). URL"
        echo -e "=============================="
        #        /home/batan/.local/bin/yt-dlp --restrict-filenames -f "${qualities[i]}" "${urls[i]}"
        /home/batan/.local/bin/yt-dlp --restrict-filenames "${urls[i]}"
    done


}

lc-down(){
read_urls
download_videos
}

#}}}
#{{{ >>>   download_list STANDALONE download from list.txt

download_list() {
    LINKS=$(cat list.txt)
    counter="1"
    TOTAL=$(echo $LINKS|wc -l)

    if [[ -z $LINKS ]];
    then
        clear
        echo -e "Could not find any links."
        echo -e "Please make sure that the file \033[31mlist.txt\033[0m exists and\n theurl links to be downloaded are recorded within."
        read -n1 -p "Enter [ANY] to continue..." xxx
    fi
    for URL in ${LINKS[@]};
    do
        clear
        echo -e "Link \033[32m${counter} \033[0m of $TOTAL"
        /usr/bin/yt-dlp_linux --restrict-filenames $URL
    done
}

#}}}
#{{{ >>>   Bleach

bls() {
    SYSTEM="cache clipboard custom desktop_entry localizations memory recent_documents rotated_logs tmp trash"
    for x in ${SYSTEM[@]}; do sudo bleachbit -c system.$x ;done
}

blf () {
    FIREFOX="backup cache cookies crash_reports dom forms passwords session_restore site_preferences url_history vacuum"
    for i in ${FIREFOX[@]}; do sudo bleachbit -c firefox.$i ;done
}

bla() {
    APT="autoclean autoremove clean package_lists"
    for i in ${APT[@]}; do sudo bleachbit -c .$i ;done
}

bld() {
    DEEPSCAN="backup ds_store thumbs_db tmp"
    for i in ${DEEPSCAN[@]}; do sudo bleachbit -c .$i ;done
}

lca(){
    sudo apt autoremove --purge -y
    sudo apt autoclean
    sudo apt clean
    sudo dpkg --configure -a
}

lcu() {
    sudo apt update
    sudo apt upgrade -y
}

lcsys() {
    lcvar=$(echo -e "bleach-system\nbleach-firefox\nbleach-apt\nbleach-deepscan\nclear-apt\nupdate-apt"|fzf -m --reverse --margin 0 --padding 0 --height 10)
    if [[ $lcvar == bleach-system ]]; then
        bls

    elif [[ $lcvar == bleach-firefox ]]; then
        blf

    elif [[ $lcvar == bleach-apt ]]; then
        bla

    elif [[ $lcvar == bleach-deepscan ]]; then
        bld
    elif [[ $lcvar == clear-apt ]]; then
        lca

    elif [[ $lcvar == update-apt ]]; then
        lcu
    fi

}

#}}}
#{{{ >>>   lc-clipboard functions
#{{{ >>>   reg function 
reg() {
    COUN="$(ls /home/batan/.config/lc-clipboard/total.list*|wc -l)"
    if [[ $1 == "--copy" ]] && [[ $2 == "all" ]]; then
        ((COUN++))
        cat /home/batan/.config/lc-clipboard/register{1..9} >> /home/batan/.config/lc-clipboard/total.list.$COUN
        echo -e "\033[36mYour cache file:\033[0m"
        ls /home/batan/.config/lc-clipboard/total.list.$COUN
        cat /home/batan/.config/lc-clipboard/total.list.$COUN
    elif [[ $1 == "--download" ]] && [[ $2 == "all" ]]; then
        if [[ $3 == mp4 ]]; then
            echo -e "\033[36mDownloading the URLs as MP4s...\033[0m"
            yt-dlp -a /home/batan/.config/lc-clipboard/register{1..9} 
        else
            echo -e "\033[36mDownloading the URLs as MP3s...\033[0m"
            yt-dlp -x --extract-audio --restrict-filenames -a /home/batan/.config/lc-clipboard/register{1..9} 
        fi

    elif [[ $1 == "--append" ]] && [[ $2 == "all" ]]; then

        for i in $(seq 9 -1 1);
        do
            cat /home/batan/.config/lc-clipboard/register$i >> $3
        done


    elif [[ $1 == "--clear" ]] && [[ $2 == "all" ]]; then

        rm /home/batan/.config/lc-clipboard/register{1..9} 
        touch /home/batan/.config/lc-clipboard/register{1..9} 


    elif [[ $1 == "--echo" ]] && [[ $2 == "all" ]]; then
        cat /home/batan/.config/lc-clipboard/register{1..9} 

    elif [[ $1 == "--help" ]]; then
        printf "         \033[32m***   \033[37mHELP MENU   \033[32m***\033[36m                     
        reg [options] file ...\033[34m                            
        if no options are specified the default behaivior 
            is to echo all 9 registers otherwise:             	 
            \033[37mOptions:                                      
            \033[32m--help\033[0m       prints his menu               
            \033[32m--echo\033[0m       echos all registers  
            \033[32m--clear\033[0m      clears all registers          
            \033[32m--append\033[0m     appends registers and stores  
             the data in a cache file      
            \033[32m--download\033[0m   prompts for yes no input and  
            determins whether to download
            mp4 or mp3 format
                   \033[36mExample command:\033[0m
        reg --download all mp4
            [assumes url in all registers and starts downloading them as mp4s]
        reg --download 1,2,3 mp3
            [as above but does so from register 1,2 and 3]
            \033[32m--copy\033[0m       copies all registers to cache 
            This software is free to use blah blah blah blah  
            but dont forget to subscripe,  hug my youtube channel
            kiss it, hold it and call it babe....             
            "


        elif [[ $1 == "" ]]; then
            cat /home/batan/.config/lc-clipboard/register{1..9} 

    fi

}
#}}}
#{{{ >>>   reg{1..9} functions

reg1() {
    cat /home/batan/.config/lc-clipboard/register1
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register1|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi

}

reg2() {
    cat /home/batan/.config/lc-clipboard/register2
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register1|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}


reg3() {
    cat /home/batan/.config/lc-clipboard/register3
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register3|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}

reg4() {
    cat /home/batan/.config/lc-clipboard/register4
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register4|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}
reg5() {
    cat /home/batan/.config/lc-clipboard/register5
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register5|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}

reg6() {
    cat /home/batan/.config/lc-clipboard/register6
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register6|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}

reg7() {
    cat /home/batan/.config/lc-clipboard/register7
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register7|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}

reg8() {
    cat /home/batan/.config/lc-clipboard/register8
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register8|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}

reg9() {
    cat /home/batan/.config/lc-clipboard/register9
    echo -e ' Copy?'
    yesno
    if [[ $YESNO == 0 ]];
    then
        cat .config/lc-clipboard/register9|xclip -selection clipboard
        echo -e '\033[44m\033[37mYES\033[0m'
    else
        echo -e '\033[44m\033[37mNO\033[0m'
    fi
}
#}}}
#}}} 
#{{{ >>>   lc-cd
lc(){
    local dest_dir=$(cat /home/batan/.lc-cd| fzf )
    if [[ $dest_dir != '' ]]; then
        cd $dest_dir
        clear
        echo -e "\033[32m=======================================\033[0m"
        ls
        echo -e "\033[32m=======================================\033[0m"
    fi
}
#}}}
#{{{ >>>   export FZF
export FZF_DEFAULT_OPTS="  --color=fg:#9FB1BC,fg+:#9FB1BC,bg:#2E5266,bg+:#2E5266\
    --color=hl:#1a7ada,hl+:#9ae6ff,info:#9fb1bc,marker:#3ee421 \
    --color=prompt:#1700af,spinner:#F4FFFD,pointer:#F4FFFD,header:#F4FFFD \
    --color=border:#F7B32B,preview-fg:#9fb1bc,preview-bg:#2e5266 \
    --color=preview-label:#00857a,label:#f7b32b,query:#d9d9d9 \
    --border='sharp' --preview-window=right,50%,'wrap' \
    --padding='2' --margin='4' --prompt='' --marker='->' \
    --pointer='>>' --separator='─' --scrollbar='│' --info='inline'"
    #}}}
#{{{ >>>   YESNO function

yesandno() {
    # Define options and corresponding commands
    OPTIONS=("Yes" "No")
    COMMANDS=("YESNO=0" "YESNO=1")
    NUM_OPTIONS=${#OPTIONS[@]}

    tput civis  # Hide cursor

# Function to display options horizontally
DISPLAY_OPTIONS() {
    tput setab 4; tput setaf 7
    echo -ne "\033[1G"  # Move cursor to beginning of the line
    for ((i=0; i<NUM_OPTIONS; i++)); do
        if [[ $i -eq $selected ]]; then
            echo -ne "\e[7m ${OPTIONS[i]} \e[27m "  # Highlight selected option
        else
            echo -n " ${OPTIONS[i]} "
        fi
    done
    tput sgr0
}
# Function to execute selected command
EXECUTE_COMMAND() {
    eval ${COMMANDS[selected]}
}

selected=0
DISPLAY_OPTIONS

# Main loop
while true; do
    read -s -n1 key
    case $key in
        D)  # Left arrow
            ((selected--))
            ;;
        C)  # Right arrow
            ((selected++))
            ;;
        "") # Enter key
            EXECUTE_COMMAND
            break
            ;;
    esac

    # Wrap selection around
    ((selected = (selected + NUM_OPTIONS) % NUM_OPTIONS))

    DISPLAY_OPTIONS
done

tput cnorm  # Restore cursor visibility
}

#}}}
#{{{ >>>   ltr  LCTRASH
ltr() {

    if [[ ! -d "$HOME/.Trash" ]]; then
        mkdir "$HOME/.Trash"
    fi
    if [[ $1 != "list" ]] && [[ $1 != "rm" ]] && [[ $1 != "help" ]];
    then
        for FILE in "$@"
        do

            if [[ $FILE == /home/batan/.Trash/$FILE ]];
            then
                COUN=$(ls /home/batan/.Trash/$FILE|wc -l)
                ((COUN++))
                sudo mv -r "$FILE" /home/batan/.Trash/$FILE$COUN
            else
                sudo mv -r "$FILE" /home/batan/.Trash/
            fi
        done
    fi

    if [[ $1 == list ]]; then
        echo -e "\033[36m"
        if [ -z "$(ls -A "/home/batan/.Trash")" ]; then
            echo -e "\033[36mThe directory .Trash is empty.\033[0m" 
        else
            echo -e "\033[36m"
            ls /home/batan/.Trash/
            echo -e "\033[0m"
            return 0
        fi
    fi

    if [[ $1 == rm ]]; then
        echo -e "\033[36mAre You sure you want to empty .Trash?\033[32m"           
        read -n1 -p "Enter [[ANY]] to continue..." xxx
        echo -e "\033[0m"
        sudo rm -rf /home/batan/.Trash/
        mkdir -p /home/batan/.Trash/
        return 0
    fi

}
# }}}
#{{{ >>>   fmp3 find and play music
fmp3() {
    for x in $(read -p "mp3   >>>   " abc && find /media/batan/100/Music/ -maxdepth 4 -type f -name *$abc*); do mpv $x ;done
}
#}}}
#{{{ >>>   cheatsheets
cheatsheet() {
    $aa="ls -1 .config/cheatsheets/|grep ".md"|sed 's/.md//g'|sed 's/_/ /g'|sed 's/cheatsheet//g'"
    counter=$(ls /home/batan/.config/cheatsheets/|grep cheatsheet.md|wc -l)

    OPTIONS=($(ls -1 .config/cheatsheets/*cheatsheet.md|sed 's/_cheatsheet.md//g'|rev|sed 's/[/].*$//g'|rev|tr '\n' ' '))
    #	OPTIONS=($(ls -1 .config/cheatsheets/*cheatsheet.md|tr '\n' ' '))
    COMMANDS=($(ls -1 .config/cheatsheets/*cheatsheet.md|awk '{print "less", $1}'|tr '\n' '' ))

    NUM_OPTIONS=${#OPTIONS[@]}

# Function to display options horizontally
DISPLAY_OPTIONS() {
    tput setab 4
    echo -ne "${White}\033[1G"  # Move cursor to beginning of the line
    for ((i=0; i<NUM_OPTIONS; i++)); do
        if [[ $i -eq $selected ]]; then
            echo -ne "\033[37m\e[7m${OPTIONS[i]}\e[27m "  # Highlight selected option
        else
            echo -n "${OPTIONS[i]} "
        fi
    done
    tput sgr0
}

# Function to execute selected command
EXECUTE_COMMAND() {

    echo "Executing command: ${COMMANDS[selected]}"
    # Execute the actual command associated with the selected option
    ${COMMANDS[selected]}
}

# Initialize
selected=0
DISPLAY_OPTIONS

# Main loop
while true; do
    read -s -n1 key  # Read user input
    case $key in
        A)  # Up arrow key
            ((selected--))
            ;;
        B)  # Down arrow key
            ((selected++))
            ;;
        "") # Enter key
            EXECUTE_COMMAND
            break
            ;;
    esac

    if [[ $selected -lt 0 ]]; then
        selected=$((NUM_OPTIONS - 1))
    elif [[ $selected -ge $NUM_OPTIONS ]]; then
        selected=0
    fi
    DISPLAY_OPTIONS
done




}

#{{{ >>>   MISC
alias c='clear'
alias rca='source /home/batan/.bashrc.alieses'
alias rrc='source /home/batan/.bashrc'
alias cu='sudo apt autoremove --purge && sudo apt autoclean && sudo apt clean && youtube-dl --rm-cache-dir && sudo sweeper --automatic && sudo bleachbit --preset -c'
alias cuu='sudo apt autoremove --purge && sudo apt autoclean && sudo apt clean && sudo sweeper --automatic && yt-dlp --rm-cache-dir && sudo bleachbit --preset -c && sudo bash cache.sh && mkdir /home/batan/.cache/calendar.vim/ && cp /home/batan/dot/credentials.vim /home/batan/.cache/calendar.vim/credentials.vim'
alias p='echo "Ba7an?12982"| xclip -selection clipboard'
alias ipp='hostname -I && nmcli connection show && sudo ufw status'
alias mhs="sudo mv /etc/hosts /etc/hosts.bbak"
alias mhsb="sudo mv /etc/hosts.bbak /etc/hosts"

alias mega='surf https://mega.nz'
alias gut="xdotool type 'git clone https://github.com/batann/'"
alias warp="/opt/Warp/./Warp-x86_64.AppImage"
alias lc-install="nvim /media/batan/100/lc-install.sh"
alias lc-2-install="nvim /media/batan/100/lc-2-install.sh"




#}}}
#===================================================================================
#}}}
#{{{ >>>   lc-ghostty search ghostty manual for intrested term
lc-ghostty () {
read -p "term in ghostty manual:   >>>   " abc 
ghostty +show-config |grep $abc|awk -F '=' '{printf "%-30s %-5s %-20s \n", $3," <---> ", $2}'
}
#}}}

#{{{>>>   menu
menu() {
    options=($($@))
    total=${#options[@]}
    MAX_DISPLAY=10
    start_index=0

    # Decorations
    HH="\033[32m┃\033[0m"
    HF="\033[37m┇\033[0m"
    HE="\033[36m>>>\033[0m"
    HG="\033[37m┋┋┋\033[0m"
    HS="\033[32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    HT="\033[32m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
    HB="\033[32m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
    HM="\033[32m━━━━━━━ ━━━━━━━━━ ━━━━━━━ ━━━━━━━━ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    HG="\033[37m┋┋┋\033[0m"

function show_menu() {
clear
tput cup 5 0
echo -e $HS
        for ((i=0; i<MAX_DISPLAY; i++)); do
            idx=$((start_index + i))
            if [[ $idx -ge $total ]]; then
                break
            fi
            if [[ $idx -eq $selected ]]; then
            echo -e "\e[1m\e[32m ->  ${options[$i]}\e[0m"
        else
            echo "   ${options[$i]}"
        fi
    done
    echo -e $HS
    echo -e ""

}


    while true; do
        show_menu
        read -rsn3 key

        case $key in
            $'\e[A')  # Up arrow key
                ((selected--))
                if [ $selected -lt 0 ]; then
                    selected=$((total - 1))
                fi
                if [ $selected -lt $start_index ]; then
                    ((start_index--))
                fi
                ;;

            $'\e[B')  # Down arrow key
                ((selected++))
                if [ $selected -ge $total ]; then
                    selected=0
                fi
                if [ $selected -ge $((start_index + MAX_DISPLAY)) ]; then
                    ((start_index++))
                fi
                ;;
            '')  # Enter key
                clear
                if [ $selected -eq $((total - 1)) ]; then
                    echo "Exiting..."
                    exit 0
                else
                    echo "You selected: ${options[$selected]}"
                    # Run the associated command

                    echo ${options[$selected]}
                    read -rsn1 -p "Press any key to continue..."
                fi
                ;;
        esac
    done


}

#}}}






#{{{ >>>   cleanup_home
cleanup_home() {
    chk_sub_dir() {
        OPTIONS_SUB_DIR=('Documents' 'Videos' 'Music' 'Archives' 'Coding' 'Installation_Files' 'E-Books' 'Fonts' 'Configurations')
        for dir in ${OPTIONS_SUB_DIR[@]};
        do
            if [[ ! -d /home/batan/$dir ]]; then
                mkdir -p /home/batan/$dir
            fi
        done
    }
    mv_to_sub_dir() {
        mv /home/batan/*.jpg /home/batan/*.jpeg /home/batan/*.png /home/batan/*.gif /home/batan/*.svg /home/batan/*.bmp /home/batan/*.webp /home/batan/*.ico /home/batan/*.tiff /home/batan/Pictures >/dev/null 2>&1
        mv /home/batan/*.pdf /home/batan/*.docx /home/batan/*.txt /home/batan/*.xls /home/batan/*.xlsx /home/batan/*.ppt /home/batan/*.rtf /home/batan/*.odt /home/batan/*.ods /home/batan/Documents >/dev/null 2>&1
        mv /home/batan/*.mp4 /home/batan/*.mkv /home/batan/*.avi /home/batan/*.mov /home/batan/*.flv /home/batan/*.webm /home/batan/*.wmv /home/batan/Videos >/dev/null 2>&1
        mv /home/batan/*.mp3 /home/batan/*.wav /home/batan/*.flac /home/batan/*.aac /home/batan/*.ogg /home/batan/*.m4a /home/batan/Music >/dev/null 2>&1
        mv /home/batan/*.zip /home/batan/*.rar /home/batan/*.7z /home/batan/*.tar /home/batan/*.gz /home/batan/*.iso /home/batan/Archives >/dev/null 2>&1
        mv /home/batan/*.py /home/batan/*.js /home/batan/*.html /home/batan/*.css /home/batan/*.json /home/batan/*.java /home/batan/*.cpp /home/batan/*.rb /home/batan/*.php /home/batan/Coding >/dev/null 2>&1
        mv /home/batan/*.exe /home/batan/*.msi /home/batan/*.dmg /home/batan/*.pkg /home/batan/*.deb /home/batan/Installation_Files >/dev/null 2>&1
        mv /home/batan/*.epub /home/batan/*.mobi /home/batan/*.azw /home/batan/*.pdf /home/batan/E-Books >/dev/null 2>&1
        mv /home/batan/*.ttf /home/batan/*.otf /home/batan/*.woff /home/batan/*.eot /home/batan/Fonts >/dev/null 2>&1
        mv /home/batan/*.cfg /home/batan/*.ini /home/batan/*.yaml /home/batan/Configurations >/dev/null 2>&1
    }

    remove_from_home() {
        sudo trash /home/batan/.*.part >/dev/null 2>&1
        sudo trash /home/batan/*.part >/dev/null 2>&1
        sudo trash /home/batan/*.ytl >/dev/null 2>&1
        sudo trash /home/batan/.*.ytl >/dev/null 2>&1
        sudo trash /home/batan/*.ytdl >/dev/null 2>&1
        sudo trash /home/batan/.*.ytdl >/dev/null 2>&1
        sudo trash /home/batan/*.log >/dev/null 2>&1
        sudo trash /home/batan/*.out >/dev/null 2>&1
        sudo trash /home/batan/*.obj >/dev/null 2>&1
        sudo trash /home/batan/*.fbx >/dev/null 2>&1
        sudo trash /home/batan/*.stl >/dev/null 2>&1
        sudo trash /home/batan/*.dae >/dev/null 2>&1
        sudo trash /home/batan/*.ai >/dev/null 2>&1
        sudo trash /home/batan/*.eps >/dev/null 2>&1
        sudo trash /home/batan/*.svg >/dev/null 2>&1
        sudo trash /home/batan/*.cdr >/dev/null 2>&1
        sudo trash /home/batan/*.db >/dev/null 2>&1
        sudo trash /home/batan/*.sqlite >/dev/null 2>&1
        sudo trash /home/batan/*.sql >/dev/null 2>&1
        sudo trash /home/batan/*.mdb >/dev/null 2>&1
        sudo trash /home/batan/.*.log >/dev/null 2>&1
        sudo trash /home/batan/.*.out >/dev/null 2>&1
        sudo trash /home/batan/.*.obj >/dev/null 2>&1
        sudo trash /home/batan/.*.fbx >/dev/null 2>&1
        sudo trash /home/batan/.*.stl >/dev/null 2>&1
        sudo trash /home/batan/.*.dae >/dev/null 2>&1
        sudo trash /home/batan/.*.ai >/dev/null 2>&1
        sudo trash /home/batan/.*.eps >/dev/null 2>&1
        sudo trash /home/batan/.*.svg >/dev/null 2>&1
        sudo trash /home/batan/.*.cdr >/dev/null 2>&1
        sudo trash /home/batan/.*.db >/dev/null 2>&1
        sudo trash /home/batan/.*.sqlite >/dev/null 2>&1
        sudo trash /home/batan/.*.sql >/dev/null 2>&1
        sudo trash /home/batan/.*.mdb >/dev/null 2>&1
        sudo trash /home/batan/.*.bak >/dev/null 2>&1
        sudo trash /home/batan/*.bak >/dev/null 2>&1
        sudo trash /home/batan/.*.org >/dev/null 2>&1
        sudo trash /home/batan/*.org >/dev/null 2>&1

    }

    chk_sub_dir
    mv_to_sub_dir
    remove_from_home

}
#}}}
#{{{>>>   lcmenu
clear
lcmenu() {
    echo -e "\033[42m\033[37mPlease define the options\033[0m ..."
    read -e -p "   Enter the command to execute [[ options=($(ls)) ]] or type individually space seperated while closing the bracets:" -i "options=(" xxx
    options=($xxx)
    selected=0
    total=${#options[@]}
    MAX_DISPLAY=10
    start_index=0
    COUNTER="25"
    # Decorations
    HS="\033[32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"

    function show_menu() {
        clear
        tput cup 5 0
        echo -e "$HS"
        for ((i = 0; i < MAX_DISPLAY; i++)); do
            idx=$((start_index + i))
            if [[ $idx -ge $total ]]; then
                break
            fi
            if [[ $idx -eq $selected ]]; then
                echo -e "\e[1m\e[32m ->  ${options[$idx]}\e[0m"
            else
                echo "    ${options[$idx]}"
            fi
        done
        echo -e "$HS"
        tput cup 25 0
        echo -e "\033[32m$input\033[0m"
    }

    while true; do
        show_menu
        read -rsn3 key

        case $key in
            $'\e[A')  # Up arrow key
                if ((selected > 0)); then
                    ((selected--))
                else
                    selected=$((total - 1))
                    start_index=$((total > MAX_DISPLAY ? total - MAX_DISPLAY : 0))
                fi
                if ((selected < start_index)); then
                    ((start_index--))
                fi
                ;;

            $'\e[B')  # Down arrow key
                if ((selected < total - 1)); then
                    ((selected++))
                else
                    selected=0
                    start_index=0
                fi
                if ((selected >= start_index + MAX_DISPLAY)); then
                    ((start_index++))
                fi
                ;;
            '')  # Enter key
                clear
                echo "You selected: ${options[$selected]}"
                if [[ -z ${options[$selected]} ]]; then
                    break 0
                fi
                ((COUNTER++))
                input="$input 'task add ${options[$selected]} project:Installation due:$(date +%Y-%m-%d)T23:30:00'\n"
                #            read -rsn1 -p "Press any key to continue..."
                ;;
        esac
    done
    runuser -u batan -- $input

}

#===================================================================================
#}}}

# Function to cleate a json file inc a directory tree, files within it and the file content in a json file
#{{{>>>   Create json incl Dir,Files and their content
create_json(){

OUTPUT_FILE="home_structure.json"

# Function to recursively generate JSON from a directory
generate_json() {
  local dir="$1"
  local indent="$2"
  local first=1

  echo "{"
  for entry in "$dir"/* "$dir"/.*; do
    [ "$(basename "$entry")" = "." ] || [ "$(basename "$entry")" = ".." ] && continue
    [ "$first" -eq 0 ] && echo ","
    first=0
    name=$(basename "$entry")
    if [ -d "$entry" ]; then
      echo -n "$indent\"$name\": "
      generate_json "$entry" "$indent  "
    elif [ -f "$entry" ]; then
      content=$(jq -Rs '.' < "$entry") # Read file content safely for JSON
      echo -n "$indent\"$name\": $content"
    fi
  done
  echo -e "\n$indent}"
}

# Prompt user to select files and directories
echo "Select files and directories to include in the JSON (space-separated):"
read -rp "Example: .bashrc .bash_aliases .vim .task: " USER_SELECTION

# Construct JSON structure
echo '{ "home": {' > "$OUTPUT_FILE"

first=1
for item in $USER_SELECTION; do
  [ "$first" -eq 0 ] && echo "," >> "$OUTPUT_FILE"
  first=0
  if [ -d "$HOME/$item" ]; then
    echo -n "  \"$item\": " >> "$OUTPUT_FILE"
    generate_json "$HOME/$item" "    " >> "$OUTPUT_FILE"
  elif [ -f "$HOME/$item" ]; then
    content=$(jq -Rs '.' < "$HOME/$item")
    echo "  \"$item\": $content" >> "$OUTPUT_FILE"
  fi
done

# Automatically add .config with all contents
echo "," >> "$OUTPUT_FILE"
echo -n "  \".config\": " >> "$OUTPUT_FILE"
generate_json "$HOME/.config" "    " >> "$OUTPUT_FILE"

echo -e "\n}}" >> "$OUTPUT_FILE"

echo "JSON file saved as $OUTPUT_FILE"



}


#}}}

#}}}

#{{{>>>   lc-ucare
lc-ucare() {
#{{{>>>   Decor
H9="\033[36m━━━━━━━━━\033[0m"
H7="\033[32m━━━━━━━\033[0m"
H15="\033[37m━━━━━━━━━━━━━━━━━━━\033[0m"


#}}}


cleanup_home() {
	chk_sub_dir() {
		OPTIONS_SUB_DIR=('Documents' 'Videos' 'Music' 'Archives' 'Coding' 'Installation_Files' 'E-Books' 'Fonts' 'Configurations')
		for dir in ${OPTIONS_SUB_DIR[@]};
			do
				if [[ ! -d /home/batan/$dir ]]; then
						mkdir -p /home/batan/$dir
						fi
						done
					}
mv_to_sub_dir() {
mv /home/batan/*.jpg /home/batan/*.jpeg /home/batan/*.png /home/batan/*.gif /home/batan/*.svg /home/batan/*.bmp /home/batan/*.webp /home/batan/*.ico /home/batan/*.tiff /home/batan/Pictures >/dev/null 2>&1
mv /home/batan/*.pdf /home/batan/*.docx /home/batan/*.txt /home/batan/*.xls /home/batan/*.xlsx /home/batan/*.ppt /home/batan/*.rtf /home/batan/*.odt /home/batan/*.ods /home/batan/Documents >/dev/null 2>&1
mv /home/batan/*.mp4 /home/batan/*.mkv /home/batan/*.avi /home/batan/*.mov /home/batan/*.flv /home/batan/*.webm /home/batan/*.wmv /home/batan/Videos >/dev/null 2>&1
mv /home/batan/*.mp3 /home/batan/*.wav /home/batan/*.flac /home/batan/*.aac /home/batan/*.ogg /home/batan/*.m4a /home/batan/Music >/dev/null 2>&1
mv /home/batan/*.zip /home/batan/*.rar /home/batan/*.7z /home/batan/*.tar /home/batan/*.gz /home/batan/*.iso /home/batan/Archives >/dev/null 2>&1
mv /home/batan/*.py /home/batan/*.js /home/batan/*.html /home/batan/*.css /home/batan/*.json /home/batan/*.java /home/batan/*.cpp /home/batan/*.rb /home/batan/*.php /home/batan/Coding >/dev/null 2>&1
mv /home/batan/*.exe /home/batan/*.msi /home/batan/*.dmg /home/batan/*.pkg /home/batan/*.deb /home/batan/Installation_Files >/dev/null 2>&1
mv /home/batan/*.epub /home/batan/*.mobi /home/batan/*.azw /home/batan/*.pdf /home/batan/E-Books >/dev/null 2>&1
mv /home/batan/*.ttf /home/batan/*.otf /home/batan/*.woff /home/batan/*.eot /home/batan/Fonts >/dev/null 2>&1
mv /home/batan/*.cfg /home/batan/*.ini /home/batan/*.yaml /home/batan/Configurations >/dev/null 2>&1
}

remove_from_home() {
sudo trash /home/batan/.*.part >/dev/null 2>&1
sudo trash /home/batan/*.part >/dev/null 2>&1
sudo trash /home/batan/*.ytl >/dev/null 2>&1
sudo trash /home/batan/.*.ytl >/dev/null 2>&1
sudo trash /home/batan/*.ytdl >/dev/null 2>&1
sudo trash /home/batan/.*.ytdl >/dev/null 2>&1
sudo trash /home/batan/*.log >/dev/null 2>&1
sudo trash /home/batan/*.out >/dev/null 2>&1
sudo trash /home/batan/*.obj >/dev/null 2>&1
sudo trash /home/batan/*.fbx >/dev/null 2>&1
sudo trash /home/batan/*.stl >/dev/null 2>&1
sudo trash /home/batan/*.dae >/dev/null 2>&1
sudo trash /home/batan/*.ai >/dev/null 2>&1
sudo trash /home/batan/*.eps >/dev/null 2>&1
sudo trash /home/batan/*.svg >/dev/null 2>&1
sudo trash /home/batan/*.cdr >/dev/null 2>&1
sudo trash /home/batan/*.db >/dev/null 2>&1
sudo trash /home/batan/*.sqlite >/dev/null 2>&1
sudo trash /home/batan/*.sql >/dev/null 2>&1
sudo trash /home/batan/*.mdb >/dev/null 2>&1
sudo trash /home/batan/.*.log >/dev/null 2>&1
sudo trash /home/batan/.*.out >/dev/null 2>&1
sudo trash /home/batan/.*.obj >/dev/null 2>&1
sudo trash /home/batan/.*.fbx >/dev/null 2>&1
sudo trash /home/batan/.*.stl >/dev/null 2>&1
sudo trash /home/batan/.*.dae >/dev/null 2>&1
sudo trash /home/batan/.*.ai >/dev/null 2>&1
sudo trash /home/batan/.*.eps >/dev/null 2>&1
sudo trash /home/batan/.*.svg >/dev/null 2>&1
sudo trash /home/batan/.*.cdr >/dev/null 2>&1
sudo trash /home/batan/.*.db >/dev/null 2>&1
sudo trash /home/batan/.*.sqlite >/dev/null 2>&1
sudo trash /home/batan/.*.sql >/dev/null 2>&1
sudo trash /home/batan/.*.mdb >/dev/null 2>&1
sudo trash /home/batan/.*.bak >/dev/null 2>&1
sudo trash /home/batan/*.bak >/dev/null 2>&1
sudo trash /home/batan/.*.org >/dev/null 2>&1
sudo trash /home/batan/*.org >/dev/null 2>&1

}

clear_cache() {

echo -e "\033[36mClearing:           \033[37mMode:\r
$H9  $H7  $H15\r
                    yt-dlp cache directory\r
                    thumnails.pngs\r
                    firefox cache\r
                    apt autoclean\r
                    apt autoremove\r
                    apt clean\r
                    unused flatpaks\033[0m"

yt-dlp --rm-cache-dir >/dev/null 2>&1
sudo rm -r /home/batan/.cache/mozilla/firefox/* >/dev/null 2>&1
sudo find /home/batan/.cache/thumbnails/ -type f -name "*.png" -exec rm -f {} \; >/dev/null 2>&1
sudo apt-get autoclean >/dev/null 2>&1
sudo apt-get autoremove --purge >/dev/null 2>&1
sudo apt-get clean >/dev/null 2>&1
flatpak uninstall --unused >/dev/null 2>&1
}

bleac() {
echo -e "\033[36mBleaching: \033[32mFirefox: \033[37mMode:\r
$H9  $H7  $H15\r
                    backup\r
                    cache\r 
                    cookies\r 
                    crash_reports\r 
                    dom\r 
                    forms\r 
                    passwords\r 
                    session_restore\r
                    site_preferences\r 
                    url_history\r 
                    vacuum"

	sudo killall firefox >/dev/null 2>&1
	sudo killall firefox-bin >/dev/null 2>&1
	
	 FIREFOX="backup cache cookies crash_reports dom forms passwords session_restore site_preferences url_history vacuum"
    for i in ${FIREFOX[@]}; do sudo bleachbit -c firefox.$i >/dev/null 2>&1 ;done
echo -e "\033[36mBleaching: \033[32mSystem:  \033[37mMode:\r
$H9  $H7  $H15\r
                    cache\r
                    clipboard\r
                    custom\r
                    desktop_entry\r
                    localizations\r
                    memory\r
                    recent_documents\r
                    rotated_logs\r
                    tmp\r
                    trash"
	SYSTEM="cache clipboard custom desktop_entry localizations memory recent_documents rotated_logs tmp trash"
    for x in ${SYSTEM[@]}; do sudo bleachbit -c system.$x >/dev/null 2>&1 ;done


}



update_sys() {

	
echo -e "\033[36mUpdating :          \033[37mMode:\r
$H9  $H7  $H15\r
                    flatpak Apps\r
                    apt packages\r
                    upgrading apt\r
                    upgrading distribution\r
                    updateing flatpak apps\033[0m"
sudo apt update >/dev/null 2>&1 
sudo apr upgrade -y >/dev/null 2>&1 
flatpak update --app -y >/dev/null 2>&1 
sudo apt dist-upgrade -y >/dev/null 2>&1 
}

cleanup_home
chk_sub_dir
mv_to_sub_dir
remove_from_home
bleac
clear_cache
update_sys

}

}



#}}}



# MISC ALIASES
#{{{>>>   Misc

alias v='vim $(find . -maxdepth 1 -type f|fzf  -m --height 8)'
alias tmm="task $1 modify due:$(date +%Y-%m-%d)T23:30:00 priority:L"
alias lc-download-mp3="/usr/bin/yt-dlp_linux -x --audio-format mp3"
alias lc-own="sudo chown -R batan:batan"
alias laun='sudo -u batan bash /home/batan/.config/i3/launcher/launcher.sh'
alias door="mpv /home/batan/.config/Door_Bell.mp3"
alias xf="xfce4-terminal"

lookfor() {
    find /media/batan/{100,200,300/home/batan,400/home/batan,500/home/batan,600/home/batan,700/home/batan,800/home/batan} -maxdepth 4 -type f -name "*$1*"
}

example_func() {
    task add $1 due:$(date +%Y-%m-%d)T23:00:00
    source /home/batan/.BASHRC.FIRST.LC
}
#}}}
